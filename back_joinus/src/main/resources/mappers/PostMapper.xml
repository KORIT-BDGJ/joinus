<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.portfolio.joinus.joinus.repository.PostRepository">

	<resultMap type="com.portfolio.joinus.joinus.entity.Post" id="PostMap">
		<id property="postId" column="post_id"/>
		<result property="writerId" column="writer_id"/>
		<result property="title" column="title"/>
		<result property="sportsId" column="sports_id"/>
		<result property="levelId" column="level_id"/>
		<result property="stateId" column="state_id"/>
		<result property="regionId" column="region_id"/>
		<result property="deadLine" column="deadline"/>
		<result property="recruitsCount" column="recruits_count"/>
		<result property="genderId" column="gender_id"/>
		<result property="text" column="text"/>
		<result property="registeDate" column="registe_date"/>
		<association property="user"  resultMap="UserMap"></association>
		<association property="sports" resultMap="SportsMap"></association>
		<association property="level" resultMap="LevelMap"></association>
		<association property="state" resultMap="StateMap"></association>
		<association property="region" resultMap="RegionMap"></association>
		<association property="gender" resultMap="GenderMap"></association>
	</resultMap>
	
	<resultMap type="com.portfolio.joinus.joinus.entity.User" id="UserMap">
		<id property="userId" column="user_id"/>
		<result property="name" column="name"/>
		<result property="email" column="email"/>
		<result property="password" column="password"/>
		<result property="address" column="address"/>
		<result property="gender" column="gender"/>
		<result property="provider" column="provider"/>
		<association property="userInfo"  resultMap="UserInfoMap"></association>
		<association property="point"  resultMap="PointMap"></association>
	</resultMap>
	
	<resultMap type="com.portfolio.joinus.joinus.entity.UserInfo" id="UserInfoMap">
		<id property="userInfoId" column="user_info_id"/>
		<result property="userId" column="user_id"/>
		<result property="image" column="image"/>
		<result property="nickName" column="nickname"/>
		<result property="pointId" column="point_id"/>
	</resultMap>

	<resultMap type="com.portfolio.joinus.joinus.entity.Point" id="PointMap">
		<id property="pointId" column="point_id"/>
		<result property="userId" column="user_id"/>
		<result property="point" column="point"/>
	</resultMap>	
	
	<resultMap type="com.portfolio.joinus.joinus.entity.Sports" id="SportsMap">
		<id property="sportsId" column="sports_id"/>
		<result property="sportsName" column="sports_name"/>
	</resultMap>
	
	<resultMap type="com.portfolio.joinus.joinus.entity.Level" id="LevelMap">
		<id property="levelId" column="level_id"/>
		<result property="levelName" column="level_name"/>
	</resultMap>
	
	<resultMap type="com.portfolio.joinus.joinus.entity.State" id="StateMap">
		<id property="stateId" column="state_id"/>
		<result property="stateName" column="state_name"/>
	</resultMap>
	
	<resultMap type="com.portfolio.joinus.joinus.entity.Region" id="RegionMap">
		<id property="regionId" column="region_id"/>
		<result property="regionName" column="region_name"/>
	</resultMap>
	
	<resultMap type="com.portfolio.joinus.joinus.entity.Gender" id="GenderMap">
		<id property="genderId" column="gender_id"/>
		<result property="genderName" column="gender_name"/>
	</resultMap>

	<select id="getPost" parameterType="Integer" resultMap="PostMap">
		SELECT
			pt.post_id,
			pt.writer_id,
			pt.title,
			pt.sports_id,
			pt.level_id,
			pt.state_id,
			pt.region_id,
			pt.deadline,
			pt.recruits_count,
			pt.gender_id,
			pt.text,
			
			ut.user_id,
			
			uit.user_info_id,
			uit.nickname,
			uit.image,
			
			spt.sports_id,
			spt.sports_name,
			
			lt.level_id,
			lt.level_name,
			
			stt.state_id,
			stt.state_name,
			
			rt.region_id,
			rt.region_name,
			
			gt.gender_id,
			gt.gender_name
		FROM 
			post_tb pt
			LEFT OUTER JOIN user_tb ut ON (ut.user_id = pt.writer_id)
			LEFT OUTER JOIN user_info_tb uit ON (uit.user_info_id = ut.user_id)
			LEFT OUTER JOIN sports_tb spt ON (spt.sports_id = pt.sports_id)
			LEFT OUTER JOIN level_tb lt ON (lt.level_id = pt.level_id)
			LEFT OUTER JOIN state_tb stt ON (stt.state_id = pt.state_id)
			LEFT OUTER JOIN region_tb rt ON (rt.region_id = pt.region_id)
			LEFT OUTER JOIN gender_tb gt ON (gt.gender_id = pt.gender_id)
		WHERE
			pt.post_id = #{postId}
	</select>
	
	<insert id="registePost" parameterType="com.portfolio.joinus.joinus.dto.post.PostReqDto" useGeneratedKeys="true" keyProperty="postId">
		INSERT INTO post_tb
		VALUES 
		(
			0,
			#{writerId},
			#{title},
			#{sportsId},
			#{levelId},
			#{stateId},
			#{regionId},
			#{deadLine},
			#{recruitsCount},
			#{genderId},
			#{text},
			NOW()
		)
	</insert>
	
	<select id="getPostList" parameterType="Integer" resultMap="PostMap">
		SELECT
			pt.post_id,
		    pt.writer_id,
            pt.title,
		    pt.sports_id,
		    pt.region_id,
            pt.deadline,
            pt.recruits_count,
            pt.gender_id,
            pt.registe_date,
		    
		    ut.user_id,
		    
		    uit.user_info_id,
		    uit.nickname,
		    
		    spt.sports_id,
		    spt.sports_name,
            
            rt.region_id,
		    rt.region_name,
            
            gt.gender_id,
		    gt.gender_name
		    
		from 
            post_tb pt
            left outer join user_tb ut on(ut.user_id = pt.writer_id)
		    left outer join user_info_tb uit on(uit.user_info_id = ut.user_id)
		    left outer join sports_tb spt on(spt.sports_id = pt.sports_id)
            left outer join region_tb rt on(rt.region_id = pt.region_id)
            left outer join gender_tb gt on(gt.gender_id = pt.gender_id)
        where
        	1 = 1
        	and pt.deadline &gt; now()
        	<choose>
        		<when test="searchType == 2">
        			and pt.title like concat('%', #{searchValue}, '%')
        		</when>
        		<when test="searchType == 3">
        		and uit.nickname like concat('%', #{searchValue}, '%')
        		</when>
        		<when test="searchType == 4">
        		and pt.text like concat('%', #{searchValue}, '%')
        		</when>
        		<otherwise>
        		<if test='searchValue != ""'>
        			and (
	        			pt.title like concat('%', #{searchValue}, '%')
	        			or uit.nickname like concat('%', #{searchValue}, '%')
	        			or pt.text like concat('%', #{searchValue}, '%')
	        		)
        		</if>
        		</otherwise>
        	</choose>
        	
        	<if test="sportsId != 0">
        		and spt.sports_id = #{sportsId}
        	</if>
        	
        	<if test="regionId != 0">
        		and rt.region_id = #{regionId}
        	</if>
        	
    	order by pt.registe_date DESC
    
        limit #{index}, 10;	
	</select>
	
	<select id="getTotalCount" parameterType="hashMap" resultType="Integer">
		SELECT
			COUNT(*)
		FROM
			post_tb pt
			LEFT OUTER JOIN user_tb ut ON (ut.user_id = pt.writer_id)
			LEFT OUTER JOIN user_info_tb uit ON (uit.user_info_id = ut.user_id)
			LEFT OUTER JOIN sports_tb spt ON (spt.sports_id = pt.sports_id)
			LEFT OUTER JOIN region_tb rt ON (rt.region_id = pt.region_id)
			LEFT OUTER JOIN gender_tb gt ON (gt.gender_id = pt.gender_id)
		WHERE
			1 = 1
			and pt.deadline &gt; now()
			<if test="searchIds != null">
				AND pt.search_id IN (
					<foreach item="searchId" collection="searchIds" separator=",">
						#{searchId}
					</foreach>
				)
			</if>
			<if test="searchValue != ''">
				AND pt.post_id LIKE CONCAT('%', #{searchValue}, '%')
			</if>
	</select>
	
	<select id="getApplicantListByPostId" parameterType="Integer" resultType="com.portfolio.joinus.joinus.entity.ApplicantList">
		SELECT
			pt.post_id AS postId,
			ut.user_id AS userId,
			uit.image,
			uit.nickname,
			lt.level_name AS levelName,
			lt.level_id AS levelId,
			stt.state_name AS stateName,
			stt.state_id AS stateId
		FROM 
			post_applicant_list_tb papl
			LEFT OUTER JOIN post_tb pt ON (pt.post_id = papl.post_id)
			LEFT OUTER JOIN user_tb ut ON (ut.user_id = papl.user_id)
			LEFT OUTER JOIN user_info_tb uit ON (uit.user_info_id = ut.user_id)
			LEFT OUTER JOIN state_tb stt ON (stt.state_id = papl.state_id)
			LEFT OUTER JOIN level_tb lt ON (lt.level_id = papl.level_id)
		WHERE
			papl.post_id = #{postId}
	</select>
	
	<select id="getAttendListByPostId" parameterType="Integer" resultType="com.portfolio.joinus.joinus.entity.AttendList">
		SELECT
			pt.post_id AS postId,
			ut.user_id AS userId,
			uit.image,
			uit.nickname,
			lt.level_name AS levelName,
			stt.state_name AS stateName
		FROM 
			post_attend_list_tb patl
			LEFT OUTER JOIN post_tb pt ON (pt.post_id = patl.post_id)
			LEFT OUTER JOIN user_tb ut ON (ut.user_id = patl.user_id)
			LEFT OUTER JOIN user_info_tb uit ON (uit.user_info_id = ut.user_id)
			LEFT OUTER JOIN state_tb stt ON (stt.state_id = patl.state_id)
			LEFT OUTER JOIN level_tb lt ON (lt.level_id = patl.level_id)
		WHERE
			patl.post_id = #{postId}
	</select>
	
	<select id="getCommentByPostId" parameterType="Integer" resultType="com.portfolio.joinus.joinus.entity.Comment">
		SELECT		    
			ct.comment_id AS commentId,
			ut.user_id AS userId,
			uit.nickname,
			uit.image,
			ct.comment
		FROM 
			comment_tb ct
			LEFT OUTER JOIN post_tb pt ON (pt.post_id = ct.post_id)
			LEFT OUTER JOIN user_tb ut ON (ut.user_id = ct.user_id)
			LEFT OUTER JOIN user_info_tb uit ON (uit.user_info_id = ut.user_id)
		WHERE
			ct.post_id = #{postId}
	</select>
	
	<select id="getOwnerPostListByUserId" parameterType="Integer" resultType="com.portfolio.joinus.joinus.entity.OwnerPostList">
	    SELECT
	        oplt.owner_post_list_id AS ownerPostListId,
	        pt.post_id AS postId,
	        pt.title,
	        ut.user_id AS userId
	    FROM
	        owner_post_list_tb oplt
			LEFT OUTER JOIN post_tb pt ON (pt.post_id = oplt.post_id)
			LEFT OUTER JOIN user_tb ut ON (ut.user_id = oplt.user_id)
	    WHERE
	        oplt.user_id = #{userId}
	</select>
	
	<select id="getHostPostListByUserId" parameterType="Integer" resultType="com.portfolio.joinus.joinus.entity.HostPostList">
	    SELECT
	        hplt.host_post_list_id AS hostPostListId,
	        ut.user_id AS userId,
	        pt.post_id AS postId,
	        pt.title
	    FROM
	        host_post_list_tb hplt
	        LEFT OUTER JOIN post_tb pt ON (pt.post_id = hplt.post_id)
	        LEFT OUTER JOIN user_tb ut ON (ut.user_id = hplt.user_id)
	    WHERE
	        ut.user_id = #{userId}
	</select>
	
	
	<select id="getMyApplicantPostListByUserId" parameterType="Integer" resultType="com.portfolio.joinus.joinus.entity.HostPostList">
		SELECT
			hplt.host_post_list_id AS hostPostListId,
			ut.user_id AS userId,
			pt.post_id AS postId,
			pt.title
		FROM
			host_post_list_tb hplt
			LEFT OUTER JOIN post_tb pt ON (pt.post_id = hplt.post_id)
			LEFT OUTER JOIN user_tb ut ON (ut.user_id = hplt.user_id)
	</select>
	
	<select id="getMyAttendPostListByUserId" parameterType="Integer" resultType="com.portfolio.joinus.joinus.entity.HostPostList">
		SELECT
			hplt.host_post_list_id AS hostPostListId,
			ut.user_id AS userId,
			pt.post_id AS postId,
			pt.title
		FROM
			host_post_list_tb hplt
			LEFT OUTER JOIN post_tb pt ON (pt.post_id = hplt.post_id)
			LEFT OUTER JOIN user_tb ut ON (ut.user_id = hplt.user_id)
	</select>
	
	<insert id="applyPost" parameterType="hashMap">
		INSERT INTO post_applicant_list_tb
		VALUES (0, #{postId}, #{userId}, #{stateId}, #{levelId})
	</insert>
	
	<delete id="cancelApplyPost" parameterType="hashMap">
		DELETE
		FROM
			post_applicant_list_tb
		WHERE
			post_id = #{postId}
			AND user_id = #{userId}
	</delete>
	
	<insert id="commentSubmit" parameterType="hashMap">
		INSERT INTO comment_tb
		VALUES (0, #{postId}, #{userId}, #{comment})
	</insert>
	
	<insert id="saveOwnerPostList" parameterType="com.portfolio.joinus.joinus.entity.OwnerPostList">
	    INSERT INTO owner_post_list_tb (owner_post_list_id, post_id, user_id)
	    VALUES (#{ownerPostListId}, #{postId}, #{userId})
	</insert>
	
	<insert id="saveMyApplicantPostList" parameterType="com.portfolio.joinus.joinus.entity.HostPostList">
	    INSERT INTO host_post_list_tb (host_post_list_id, post_id, user_id)
	    VALUES (#{hostPostListId}, #{postId}, #{userId})
	</insert>
	
	<delete id="commentDelete" parameterType="hashMap">
		delete
		from
			comment_tb
		where
			post_id = #{postId}
		and comment_id = #{commentId}
	</delete>
	
	<delete id="attendDelete" parameterType="hashMap">
		delete
		from
			post_attend_list_tb
		where
			post_id = #{postId}
		and user_id = #{userId}
	</delete>
	
	<delete id="applicantDelete" parameterType="hashMap">
		delete
		from
			post_applicant_list_tb
		where
			post_id = #{postId}
		and user_id = #{userId}
	</delete>
	
	<insert id="applicantAccept" parameterType="hashMap">
		insert post_attend_list_tb
		values (0, #{postId}, #{userId}, #{stateId}, #{levelId})
	</insert>
	

</mapper>
